// Copyright 2024 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * The realtime protocol for Nakama server.
 */
 syntax = "proto3";

 package nakama.peer;
 
 import "google/protobuf/timestamp.proto";
 import "google/protobuf/wrappers.proto";
 import "github.com/doublemo/nakama-common/rtapi/realtime.proto";
 
 option go_package = "github.com/doublemo/nakama-kit/pb";
 
 option java_multiple_files = true;
 option java_outer_classname = "NakamaPeer";
 option java_package = "com.doublemo.nakama.pb";
 
 option csharp_namespace = "Nakama.Protobuf";

 service Peer {
    rpc Call(Request) returns(ResponseWriter);
    rpc Stream(stream Request) returns(stream ResponseWriter);
}

message Request {
    map<string, string> context = 1;
    oneof payload {
        realtime.Envelope envelope = 2;
        string ping = 3;
        string singleSocket = 4;
        Disconnect disconnect = 5;
        ResponseWriter responseWriter = 6;
    }
}

message ResponseWriter {
    map<string, string> context = 1;
    repeated Recipienter recipient = 2;
    oneof payload {
        realtime.Envelope envelope = 3;
        string pong = 4;
    }
}

message Recipienter {
    enum Role {
        SESSIONID = 0;
        CHANNEL = 1;
        STREAM = 2;
        USERID = 3;
    }

    Role action = 1;
    oneof payload {
        string token = 2;
        PresenceStream stream = 3;
    }
}

message Frame {
    string id = 1;
    string inbox = 2;
    string node = 3;
    google.protobuf.Timestamp timestamp = 4;
    oneof payload {
        Request request = 5;
        ResponseWriter responseWriter = 6;
        BinaryLog binaryLog = 7;
        Status status = 8;
    }
}

message Disconnect {
    string sessionID = 1;
    bool ban = 2;
    uint32 reason = 3;
}

message State {
    string node = 1;
    repeated BinaryLog binaryLog = 2;
    repeated Presence Presences = 3; 
    CheckPoint checkPoint = 4;
    uint64 version = 5;
}

message Status {
    string name = 1;
    int32  health = 2;
    int32 sessionCount = 3;
    int32 presenceCount = 4;
    int32 matchCount = 5;
    int32 goroutineCount = 6;
    double avgLatencyMs = 7;
    double avgRateSec = 8;
    double avgInputKbs = 9;
    double avgOutputKbs = 10;
}

message PresenceID {
    string sessionID = 1;
    string node = 2;
}

message Presence {
    string sessionID = 1;
    string userID = 2;
    repeated PresenceStream  stream = 3;
    repeated PresenceMeta meta = 4;
    bool allowIfFirstForSession = 5;
    string node = 6;
}

message PresenceStream {
    uint32 mode        = 1;
    string subject     = 2;
    string subcontext  = 3;
    string label       = 4;
}

message PresenceMeta {
    uint32 sessionFormat = 1;
    bool   hidden = 2;
    bool   persistence  = 3;
    string username = 4;    
    string status = 5;      
    uint32 reason = 6;      
}

message NodeMeta {
    enum Status {
        // 节点已停止
        STOPED = 0;

        // 节点正常
        OK = 1;

        // 节点维护中
        MAINTENANCE = 2;
    }

    enum Balancer {
        // 随机
        RANDOM = 0;

        // 循环
        ROUNDROBIN = 1;

        // HASHRING
        HASHRING = 2;
    }

    // 节点名称
    string name = 1;

    // 节点参数
    map<string, string> vars = 2;

    // 节点IP
    string ip = 3;

    // 节点端口
    uint32 port = 4;

    // 节点服务角色
    string role = 5;

    // 节点状态
    Status status = 6;

    // 节点权重
    int32 weight = 7;

    // 节点负载方式
    Balancer balancer = 8;

    // 允许流连接
    bool allowStream = 9;
}

message BanValue {
    repeated string values = 1;
}

message UntrackValue {
    string sessionID = 1;
    string userID = 2;
    repeated PresenceStream  stream = 3;
    repeated uint32 modes = 4;
    PresenceStream skip = 5;
    uint32 reason  = 6;
}

message BinaryLog {
    uint64 id = 1;
    string node = 2;
    google.protobuf.Timestamp timestamp = 3;
    oneof payload {
        Presence track = 4;
        UntrackValue untrack = 5;
        BanValue ban = 6;
        Presence updateTrack = 7;
    }
}

message Point {
    map<string, uint64> point = 1;
}

message CheckPoint {
    map<string, Point> value = 1;
}