// Copyright 2024 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// The realtime protocol for Nakama server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.0
// source: peer.proto

package pb

import (
	api "github.com/doublemo/nakama-common/api"
	rtapi "github.com/doublemo/nakama-common/rtapi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Recipienter_Role int32

const (
	Recipienter_SESSIONID Recipienter_Role = 0
	Recipienter_CHANNEL   Recipienter_Role = 1
	Recipienter_STREAM    Recipienter_Role = 2
	Recipienter_USERID    Recipienter_Role = 3
)

// Enum value maps for Recipienter_Role.
var (
	Recipienter_Role_name = map[int32]string{
		0: "SESSIONID",
		1: "CHANNEL",
		2: "STREAM",
		3: "USERID",
	}
	Recipienter_Role_value = map[string]int32{
		"SESSIONID": 0,
		"CHANNEL":   1,
		"STREAM":    2,
		"USERID":    3,
	}
)

func (x Recipienter_Role) Enum() *Recipienter_Role {
	p := new(Recipienter_Role)
	*p = x
	return p
}

func (x Recipienter_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Recipienter_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[0].Descriptor()
}

func (Recipienter_Role) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[0]
}

func (x Recipienter_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Recipienter_Role.Descriptor instead.
func (Recipienter_Role) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2, 0}
}

type NodeMeta_Status int32

const (
	// 节点已停止
	NodeMeta_STOPED NodeMeta_Status = 0
	// 节点正常
	NodeMeta_OK NodeMeta_Status = 1
	// 节点维护中
	NodeMeta_MAINTENANCE NodeMeta_Status = 2
)

// Enum value maps for NodeMeta_Status.
var (
	NodeMeta_Status_name = map[int32]string{
		0: "STOPED",
		1: "OK",
		2: "MAINTENANCE",
	}
	NodeMeta_Status_value = map[string]int32{
		"STOPED":      0,
		"OK":          1,
		"MAINTENANCE": 2,
	}
)

func (x NodeMeta_Status) Enum() *NodeMeta_Status {
	p := new(NodeMeta_Status)
	*p = x
	return p
}

func (x NodeMeta_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeMeta_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[1].Descriptor()
}

func (NodeMeta_Status) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[1]
}

func (x NodeMeta_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeMeta_Status.Descriptor instead.
func (NodeMeta_Status) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11, 0}
}

type NodeMeta_Balancer int32

const (
	// 随机
	NodeMeta_RANDOM NodeMeta_Balancer = 0
	// 循环
	NodeMeta_ROUNDROBIN NodeMeta_Balancer = 1
	// HASHRING
	NodeMeta_HASHRING NodeMeta_Balancer = 2
)

// Enum value maps for NodeMeta_Balancer.
var (
	NodeMeta_Balancer_name = map[int32]string{
		0: "RANDOM",
		1: "ROUNDROBIN",
		2: "HASHRING",
	}
	NodeMeta_Balancer_value = map[string]int32{
		"RANDOM":     0,
		"ROUNDROBIN": 1,
		"HASHRING":   2,
	}
)

func (x NodeMeta_Balancer) Enum() *NodeMeta_Balancer {
	p := new(NodeMeta_Balancer)
	*p = x
	return p
}

func (x NodeMeta_Balancer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeMeta_Balancer) Descriptor() protoreflect.EnumDescriptor {
	return file_peer_proto_enumTypes[2].Descriptor()
}

func (NodeMeta_Balancer) Type() protoreflect.EnumType {
	return &file_peer_proto_enumTypes[2]
}

func (x NodeMeta_Balancer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeMeta_Balancer.Descriptor instead.
func (NodeMeta_Balancer) EnumDescriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11, 1}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context map[string]string `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Payload:
	//
	//	*Request_Ping
	//	*Request_SingleSocket
	//	*Request_Disconnect
	//	*Request_Out
	//	*Request_In
	Payload isRequest_Payload `protobuf_oneof:"payload"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (m *Request) GetPayload() isRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Request) GetPing() string {
	if x, ok := x.GetPayload().(*Request_Ping); ok {
		return x.Ping
	}
	return ""
}

func (x *Request) GetSingleSocket() string {
	if x, ok := x.GetPayload().(*Request_SingleSocket); ok {
		return x.SingleSocket
	}
	return ""
}

func (x *Request) GetDisconnect() *Disconnect {
	if x, ok := x.GetPayload().(*Request_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

func (x *Request) GetOut() *ResponseWriter {
	if x, ok := x.GetPayload().(*Request_Out); ok {
		return x.Out
	}
	return nil
}

func (x *Request) GetIn() *api.Request {
	if x, ok := x.GetPayload().(*Request_In); ok {
		return x.In
	}
	return nil
}

type isRequest_Payload interface {
	isRequest_Payload()
}

type Request_Ping struct {
	Ping string `protobuf:"bytes,2,opt,name=ping,proto3,oneof"`
}

type Request_SingleSocket struct {
	SingleSocket string `protobuf:"bytes,3,opt,name=singleSocket,proto3,oneof"`
}

type Request_Disconnect struct {
	Disconnect *Disconnect `protobuf:"bytes,4,opt,name=disconnect,proto3,oneof"`
}

type Request_Out struct {
	Out *ResponseWriter `protobuf:"bytes,5,opt,name=out,proto3,oneof"`
}

type Request_In struct {
	In *api.Request `protobuf:"bytes,6,opt,name=in,proto3,oneof"`
}

func (*Request_Ping) isRequest_Payload() {}

func (*Request_SingleSocket) isRequest_Payload() {}

func (*Request_Disconnect) isRequest_Payload() {}

func (*Request_Out) isRequest_Payload() {}

func (*Request_In) isRequest_Payload() {}

type ResponseWriter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   map[string]string `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Recipient []*Recipienter    `protobuf:"bytes,2,rep,name=recipient,proto3" json:"recipient,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ResponseWriter_Envelope
	//	*ResponseWriter_Pong
	Payload isResponseWriter_Payload `protobuf_oneof:"payload"`
}

func (x *ResponseWriter) Reset() {
	*x = ResponseWriter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWriter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWriter) ProtoMessage() {}

func (x *ResponseWriter) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWriter.ProtoReflect.Descriptor instead.
func (*ResponseWriter) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseWriter) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ResponseWriter) GetRecipient() []*Recipienter {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (m *ResponseWriter) GetPayload() isResponseWriter_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ResponseWriter) GetEnvelope() *rtapi.Envelope {
	if x, ok := x.GetPayload().(*ResponseWriter_Envelope); ok {
		return x.Envelope
	}
	return nil
}

func (x *ResponseWriter) GetPong() string {
	if x, ok := x.GetPayload().(*ResponseWriter_Pong); ok {
		return x.Pong
	}
	return ""
}

type isResponseWriter_Payload interface {
	isResponseWriter_Payload()
}

type ResponseWriter_Envelope struct {
	Envelope *rtapi.Envelope `protobuf:"bytes,3,opt,name=envelope,proto3,oneof"`
}

type ResponseWriter_Pong struct {
	Pong string `protobuf:"bytes,4,opt,name=pong,proto3,oneof"`
}

func (*ResponseWriter_Envelope) isResponseWriter_Payload() {}

func (*ResponseWriter_Pong) isResponseWriter_Payload() {}

type Recipienter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action Recipienter_Role `protobuf:"varint,1,opt,name=action,proto3,enum=nakama.peer.Recipienter_Role" json:"action,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Recipienter_Token
	//	*Recipienter_Stream
	Payload isRecipienter_Payload `protobuf_oneof:"payload"`
}

func (x *Recipienter) Reset() {
	*x = Recipienter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipienter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipienter) ProtoMessage() {}

func (x *Recipienter) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipienter.ProtoReflect.Descriptor instead.
func (*Recipienter) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{2}
}

func (x *Recipienter) GetAction() Recipienter_Role {
	if x != nil {
		return x.Action
	}
	return Recipienter_SESSIONID
}

func (m *Recipienter) GetPayload() isRecipienter_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Recipienter) GetToken() string {
	if x, ok := x.GetPayload().(*Recipienter_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Recipienter) GetStream() *PresenceStream {
	if x, ok := x.GetPayload().(*Recipienter_Stream); ok {
		return x.Stream
	}
	return nil
}

type isRecipienter_Payload interface {
	isRecipienter_Payload()
}

type Recipienter_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

type Recipienter_Stream struct {
	Stream *PresenceStream `protobuf:"bytes,3,opt,name=stream,proto3,oneof"`
}

func (*Recipienter_Token) isRecipienter_Payload() {}

func (*Recipienter_Stream) isRecipienter_Payload() {}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Inbox     string                 `protobuf:"bytes,2,opt,name=inbox,proto3" json:"inbox,omitempty"`
	Node      string                 `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Frame_Request
	//	*Frame_ResponseWriter
	//	*Frame_BinaryLog
	//	*Frame_Status
	Payload isFrame_Payload `protobuf_oneof:"payload"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{3}
}

func (x *Frame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Frame) GetInbox() string {
	if x != nil {
		return x.Inbox
	}
	return ""
}

func (x *Frame) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Frame) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *Frame) GetPayload() isFrame_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Frame) GetRequest() *Request {
	if x, ok := x.GetPayload().(*Frame_Request); ok {
		return x.Request
	}
	return nil
}

func (x *Frame) GetResponseWriter() *ResponseWriter {
	if x, ok := x.GetPayload().(*Frame_ResponseWriter); ok {
		return x.ResponseWriter
	}
	return nil
}

func (x *Frame) GetBinaryLog() *BinaryLog {
	if x, ok := x.GetPayload().(*Frame_BinaryLog); ok {
		return x.BinaryLog
	}
	return nil
}

func (x *Frame) GetStatus() *Status {
	if x, ok := x.GetPayload().(*Frame_Status); ok {
		return x.Status
	}
	return nil
}

type isFrame_Payload interface {
	isFrame_Payload()
}

type Frame_Request struct {
	Request *Request `protobuf:"bytes,5,opt,name=request,proto3,oneof"`
}

type Frame_ResponseWriter struct {
	ResponseWriter *ResponseWriter `protobuf:"bytes,6,opt,name=responseWriter,proto3,oneof"`
}

type Frame_BinaryLog struct {
	BinaryLog *BinaryLog `protobuf:"bytes,7,opt,name=binaryLog,proto3,oneof"`
}

type Frame_Status struct {
	Status *Status `protobuf:"bytes,8,opt,name=status,proto3,oneof"`
}

func (*Frame_Request) isFrame_Payload() {}

func (*Frame_ResponseWriter) isFrame_Payload() {}

func (*Frame_BinaryLog) isFrame_Payload() {}

func (*Frame_Status) isFrame_Payload() {}

type Disconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Ban       bool   `protobuf:"varint,2,opt,name=ban,proto3" json:"ban,omitempty"`
	Reason    uint32 `protobuf:"varint,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Disconnect) Reset() {
	*x = Disconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disconnect) ProtoMessage() {}

func (x *Disconnect) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disconnect.ProtoReflect.Descriptor instead.
func (*Disconnect) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{4}
}

func (x *Disconnect) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Disconnect) GetBan() bool {
	if x != nil {
		return x.Ban
	}
	return false
}

func (x *Disconnect) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node       string       `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BinaryLog  []*BinaryLog `protobuf:"bytes,2,rep,name=binaryLog,proto3" json:"binaryLog,omitempty"`
	Presences  []*Presence  `protobuf:"bytes,3,rep,name=Presences,proto3" json:"Presences,omitempty"`
	CheckPoint *CheckPoint  `protobuf:"bytes,4,opt,name=checkPoint,proto3" json:"checkPoint,omitempty"`
	Version    uint64       `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{5}
}

func (x *State) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *State) GetBinaryLog() []*BinaryLog {
	if x != nil {
		return x.BinaryLog
	}
	return nil
}

func (x *State) GetPresences() []*Presence {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *State) GetCheckPoint() *CheckPoint {
	if x != nil {
		return x.CheckPoint
	}
	return nil
}

func (x *State) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Health         int32   `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	SessionCount   int32   `protobuf:"varint,3,opt,name=sessionCount,proto3" json:"sessionCount,omitempty"`
	PresenceCount  int32   `protobuf:"varint,4,opt,name=presenceCount,proto3" json:"presenceCount,omitempty"`
	MatchCount     int32   `protobuf:"varint,5,opt,name=matchCount,proto3" json:"matchCount,omitempty"`
	GoroutineCount int32   `protobuf:"varint,6,opt,name=goroutineCount,proto3" json:"goroutineCount,omitempty"`
	AvgLatencyMs   float64 `protobuf:"fixed64,7,opt,name=avgLatencyMs,proto3" json:"avgLatencyMs,omitempty"`
	AvgRateSec     float64 `protobuf:"fixed64,8,opt,name=avgRateSec,proto3" json:"avgRateSec,omitempty"`
	AvgInputKbs    float64 `protobuf:"fixed64,9,opt,name=avgInputKbs,proto3" json:"avgInputKbs,omitempty"`
	AvgOutputKbs   float64 `protobuf:"fixed64,10,opt,name=avgOutputKbs,proto3" json:"avgOutputKbs,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{6}
}

func (x *Status) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Status) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *Status) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

func (x *Status) GetPresenceCount() int32 {
	if x != nil {
		return x.PresenceCount
	}
	return 0
}

func (x *Status) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *Status) GetGoroutineCount() int32 {
	if x != nil {
		return x.GoroutineCount
	}
	return 0
}

func (x *Status) GetAvgLatencyMs() float64 {
	if x != nil {
		return x.AvgLatencyMs
	}
	return 0
}

func (x *Status) GetAvgRateSec() float64 {
	if x != nil {
		return x.AvgRateSec
	}
	return 0
}

func (x *Status) GetAvgInputKbs() float64 {
	if x != nil {
		return x.AvgInputKbs
	}
	return 0
}

func (x *Status) GetAvgOutputKbs() float64 {
	if x != nil {
		return x.AvgOutputKbs
	}
	return 0
}

type PresenceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Node      string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *PresenceID) Reset() {
	*x = PresenceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceID) ProtoMessage() {}

func (x *PresenceID) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceID.ProtoReflect.Descriptor instead.
func (*PresenceID) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{7}
}

func (x *PresenceID) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *PresenceID) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type Presence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID              string            `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID                 string            `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream                 []*PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Meta                   []*PresenceMeta   `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty"`
	AllowIfFirstForSession bool              `protobuf:"varint,5,opt,name=allowIfFirstForSession,proto3" json:"allowIfFirstForSession,omitempty"`
	Node                   string            `protobuf:"bytes,6,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *Presence) Reset() {
	*x = Presence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presence) ProtoMessage() {}

func (x *Presence) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presence.ProtoReflect.Descriptor instead.
func (*Presence) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{8}
}

func (x *Presence) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Presence) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Presence) GetStream() []*PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *Presence) GetMeta() []*PresenceMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Presence) GetAllowIfFirstForSession() bool {
	if x != nil {
		return x.AllowIfFirstForSession
	}
	return false
}

func (x *Presence) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type PresenceStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode       uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	Subject    string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Subcontext string `protobuf:"bytes,3,opt,name=subcontext,proto3" json:"subcontext,omitempty"`
	Label      string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *PresenceStream) Reset() {
	*x = PresenceStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceStream) ProtoMessage() {}

func (x *PresenceStream) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceStream.ProtoReflect.Descriptor instead.
func (*PresenceStream) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{9}
}

func (x *PresenceStream) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *PresenceStream) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *PresenceStream) GetSubcontext() string {
	if x != nil {
		return x.Subcontext
	}
	return ""
}

func (x *PresenceStream) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type PresenceMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionFormat uint32 `protobuf:"varint,1,opt,name=sessionFormat,proto3" json:"sessionFormat,omitempty"`
	Hidden        bool   `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Persistence   bool   `protobuf:"varint,3,opt,name=persistence,proto3" json:"persistence,omitempty"`
	Username      string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Status        string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Reason        uint32 `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PresenceMeta) Reset() {
	*x = PresenceMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceMeta) ProtoMessage() {}

func (x *PresenceMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceMeta.ProtoReflect.Descriptor instead.
func (*PresenceMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{10}
}

func (x *PresenceMeta) GetSessionFormat() uint32 {
	if x != nil {
		return x.SessionFormat
	}
	return 0
}

func (x *PresenceMeta) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *PresenceMeta) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

func (x *PresenceMeta) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PresenceMeta) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PresenceMeta) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type NodeMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 节点参数
	Vars map[string]string `protobuf:"bytes,2,rep,name=vars,proto3" json:"vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 节点IP
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// 节点端口
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// 节点服务角色
	Role string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	// 节点状态
	Status NodeMeta_Status `protobuf:"varint,6,opt,name=status,proto3,enum=nakama.peer.NodeMeta_Status" json:"status,omitempty"`
	// 节点权重
	Weight int32 `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	// 节点负载方式
	Balancer NodeMeta_Balancer `protobuf:"varint,8,opt,name=balancer,proto3,enum=nakama.peer.NodeMeta_Balancer" json:"balancer,omitempty"`
	// 允许流连接
	AllowStream bool `protobuf:"varint,9,opt,name=allowStream,proto3" json:"allowStream,omitempty"`
}

func (x *NodeMeta) Reset() {
	*x = NodeMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMeta) ProtoMessage() {}

func (x *NodeMeta) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMeta.ProtoReflect.Descriptor instead.
func (*NodeMeta) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{11}
}

func (x *NodeMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeMeta) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *NodeMeta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeMeta) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeMeta) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *NodeMeta) GetStatus() NodeMeta_Status {
	if x != nil {
		return x.Status
	}
	return NodeMeta_STOPED
}

func (x *NodeMeta) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *NodeMeta) GetBalancer() NodeMeta_Balancer {
	if x != nil {
		return x.Balancer
	}
	return NodeMeta_RANDOM
}

func (x *NodeMeta) GetAllowStream() bool {
	if x != nil {
		return x.AllowStream
	}
	return false
}

type BanValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *BanValue) Reset() {
	*x = BanValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanValue) ProtoMessage() {}

func (x *BanValue) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanValue.ProtoReflect.Descriptor instead.
func (*BanValue) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{12}
}

func (x *BanValue) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type UntrackValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string            `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	UserID    string            `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Stream    []*PresenceStream `protobuf:"bytes,3,rep,name=stream,proto3" json:"stream,omitempty"`
	Modes     []uint32          `protobuf:"varint,4,rep,packed,name=modes,proto3" json:"modes,omitempty"`
	Skip      *PresenceStream   `protobuf:"bytes,5,opt,name=skip,proto3" json:"skip,omitempty"`
	Reason    uint32            `protobuf:"varint,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UntrackValue) Reset() {
	*x = UntrackValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UntrackValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UntrackValue) ProtoMessage() {}

func (x *UntrackValue) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UntrackValue.ProtoReflect.Descriptor instead.
func (*UntrackValue) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{13}
}

func (x *UntrackValue) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *UntrackValue) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UntrackValue) GetStream() []*PresenceStream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *UntrackValue) GetModes() []uint32 {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *UntrackValue) GetSkip() *PresenceStream {
	if x != nil {
		return x.Skip
	}
	return nil
}

func (x *UntrackValue) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

type BinaryLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Node      string                 `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*BinaryLog_Track
	//	*BinaryLog_Untrack
	//	*BinaryLog_Ban
	//	*BinaryLog_UpdateTrack
	Payload isBinaryLog_Payload `protobuf_oneof:"payload"`
}

func (x *BinaryLog) Reset() {
	*x = BinaryLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryLog) ProtoMessage() {}

func (x *BinaryLog) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryLog.ProtoReflect.Descriptor instead.
func (*BinaryLog) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{14}
}

func (x *BinaryLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BinaryLog) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *BinaryLog) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *BinaryLog) GetPayload() isBinaryLog_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *BinaryLog) GetTrack() *Presence {
	if x, ok := x.GetPayload().(*BinaryLog_Track); ok {
		return x.Track
	}
	return nil
}

func (x *BinaryLog) GetUntrack() *UntrackValue {
	if x, ok := x.GetPayload().(*BinaryLog_Untrack); ok {
		return x.Untrack
	}
	return nil
}

func (x *BinaryLog) GetBan() *BanValue {
	if x, ok := x.GetPayload().(*BinaryLog_Ban); ok {
		return x.Ban
	}
	return nil
}

func (x *BinaryLog) GetUpdateTrack() *Presence {
	if x, ok := x.GetPayload().(*BinaryLog_UpdateTrack); ok {
		return x.UpdateTrack
	}
	return nil
}

type isBinaryLog_Payload interface {
	isBinaryLog_Payload()
}

type BinaryLog_Track struct {
	Track *Presence `protobuf:"bytes,4,opt,name=track,proto3,oneof"`
}

type BinaryLog_Untrack struct {
	Untrack *UntrackValue `protobuf:"bytes,5,opt,name=untrack,proto3,oneof"`
}

type BinaryLog_Ban struct {
	Ban *BanValue `protobuf:"bytes,6,opt,name=ban,proto3,oneof"`
}

type BinaryLog_UpdateTrack struct {
	UpdateTrack *Presence `protobuf:"bytes,7,opt,name=updateTrack,proto3,oneof"`
}

func (*BinaryLog_Track) isBinaryLog_Payload() {}

func (*BinaryLog_Untrack) isBinaryLog_Payload() {}

func (*BinaryLog_Ban) isBinaryLog_Payload() {}

func (*BinaryLog_UpdateTrack) isBinaryLog_Payload() {}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point map[string]uint64 `protobuf:"bytes,1,rep,name=point,proto3" json:"point,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{15}
}

func (x *Point) GetPoint() map[string]uint64 {
	if x != nil {
		return x.Point
	}
	return nil
}

type CheckPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]*Point `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckPoint) Reset() {
	*x = CheckPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPoint) ProtoMessage() {}

func (x *CheckPoint) ProtoReflect() protoreflect.Message {
	mi := &file_peer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPoint.ProtoReflect.Descriptor instead.
func (*CheckPoint) Descriptor() ([]byte, []int) {
	return file_peer_proto_rawDescGZIP(), []int{16}
}

func (x *CheckPoint) GetValue() map[string]*Point {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_peer_proto protoreflect.FileDescriptor

var file_peer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x72, 0x74, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdc, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x2f, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa2,
	0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x3a, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x53, 0x45,
	0x52, 0x49, 0x44, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xe6, 0x02, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d,
	0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c,
	0x6f, 0x67, 0x48, 0x00, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x54, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xd9, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a,
	0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x4c, 0x6f, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd0, 0x02, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x76,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x76, 0x67, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61,
	0x76, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76,
	0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x76, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x73, 0x22, 0x3e,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xf0,
	0x01, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x66,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x66, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x74, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd5, 0x03, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x3a, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x37,
	0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x4f, 0x50, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x22, 0x34, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x48, 0x41, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x22, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc0, 0x02, 0x0a, 0x09,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x0a,
	0x03, 0x62, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x61, 0x6b,
	0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x76,
	0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x4c, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x82, 0x01,
	0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14,
	0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x6e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x5b, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x6d, 0x6f, 0x2e, 0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x62, 0x42, 0x0a, 0x4e, 0x61,
	0x6b, 0x61, 0x6d, 0x61, 0x50, 0x65, 0x65, 0x72, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x2f,
	0x6e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x70, 0x62, 0xaa, 0x02, 0x0f,
	0x4e, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peer_proto_rawDescOnce sync.Once
	file_peer_proto_rawDescData = file_peer_proto_rawDesc
)

func file_peer_proto_rawDescGZIP() []byte {
	file_peer_proto_rawDescOnce.Do(func() {
		file_peer_proto_rawDescData = protoimpl.X.CompressGZIP(file_peer_proto_rawDescData)
	})
	return file_peer_proto_rawDescData
}

var file_peer_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_peer_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_peer_proto_goTypes = []interface{}{
	(Recipienter_Role)(0),         // 0: nakama.peer.Recipienter.Role
	(NodeMeta_Status)(0),          // 1: nakama.peer.NodeMeta.Status
	(NodeMeta_Balancer)(0),        // 2: nakama.peer.NodeMeta.Balancer
	(*Request)(nil),               // 3: nakama.peer.Request
	(*ResponseWriter)(nil),        // 4: nakama.peer.ResponseWriter
	(*Recipienter)(nil),           // 5: nakama.peer.Recipienter
	(*Frame)(nil),                 // 6: nakama.peer.Frame
	(*Disconnect)(nil),            // 7: nakama.peer.Disconnect
	(*State)(nil),                 // 8: nakama.peer.State
	(*Status)(nil),                // 9: nakama.peer.Status
	(*PresenceID)(nil),            // 10: nakama.peer.PresenceID
	(*Presence)(nil),              // 11: nakama.peer.Presence
	(*PresenceStream)(nil),        // 12: nakama.peer.PresenceStream
	(*PresenceMeta)(nil),          // 13: nakama.peer.PresenceMeta
	(*NodeMeta)(nil),              // 14: nakama.peer.NodeMeta
	(*BanValue)(nil),              // 15: nakama.peer.BanValue
	(*UntrackValue)(nil),          // 16: nakama.peer.UntrackValue
	(*BinaryLog)(nil),             // 17: nakama.peer.BinaryLog
	(*Point)(nil),                 // 18: nakama.peer.Point
	(*CheckPoint)(nil),            // 19: nakama.peer.CheckPoint
	nil,                           // 20: nakama.peer.Request.ContextEntry
	nil,                           // 21: nakama.peer.ResponseWriter.ContextEntry
	nil,                           // 22: nakama.peer.NodeMeta.VarsEntry
	nil,                           // 23: nakama.peer.Point.PointEntry
	nil,                           // 24: nakama.peer.CheckPoint.ValueEntry
	(*api.Request)(nil),           // 25: nakama.api.Request
	(*rtapi.Envelope)(nil),        // 26: nakama.realtime.Envelope
	(*timestamppb.Timestamp)(nil), // 27: google.protobuf.Timestamp
}
var file_peer_proto_depIdxs = []int32{
	20, // 0: nakama.peer.Request.context:type_name -> nakama.peer.Request.ContextEntry
	7,  // 1: nakama.peer.Request.disconnect:type_name -> nakama.peer.Disconnect
	4,  // 2: nakama.peer.Request.out:type_name -> nakama.peer.ResponseWriter
	25, // 3: nakama.peer.Request.in:type_name -> nakama.api.Request
	21, // 4: nakama.peer.ResponseWriter.context:type_name -> nakama.peer.ResponseWriter.ContextEntry
	5,  // 5: nakama.peer.ResponseWriter.recipient:type_name -> nakama.peer.Recipienter
	26, // 6: nakama.peer.ResponseWriter.envelope:type_name -> nakama.realtime.Envelope
	0,  // 7: nakama.peer.Recipienter.action:type_name -> nakama.peer.Recipienter.Role
	12, // 8: nakama.peer.Recipienter.stream:type_name -> nakama.peer.PresenceStream
	27, // 9: nakama.peer.Frame.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 10: nakama.peer.Frame.request:type_name -> nakama.peer.Request
	4,  // 11: nakama.peer.Frame.responseWriter:type_name -> nakama.peer.ResponseWriter
	17, // 12: nakama.peer.Frame.binaryLog:type_name -> nakama.peer.BinaryLog
	9,  // 13: nakama.peer.Frame.status:type_name -> nakama.peer.Status
	17, // 14: nakama.peer.State.binaryLog:type_name -> nakama.peer.BinaryLog
	11, // 15: nakama.peer.State.Presences:type_name -> nakama.peer.Presence
	19, // 16: nakama.peer.State.checkPoint:type_name -> nakama.peer.CheckPoint
	12, // 17: nakama.peer.Presence.stream:type_name -> nakama.peer.PresenceStream
	13, // 18: nakama.peer.Presence.meta:type_name -> nakama.peer.PresenceMeta
	22, // 19: nakama.peer.NodeMeta.vars:type_name -> nakama.peer.NodeMeta.VarsEntry
	1,  // 20: nakama.peer.NodeMeta.status:type_name -> nakama.peer.NodeMeta.Status
	2,  // 21: nakama.peer.NodeMeta.balancer:type_name -> nakama.peer.NodeMeta.Balancer
	12, // 22: nakama.peer.UntrackValue.stream:type_name -> nakama.peer.PresenceStream
	12, // 23: nakama.peer.UntrackValue.skip:type_name -> nakama.peer.PresenceStream
	27, // 24: nakama.peer.BinaryLog.timestamp:type_name -> google.protobuf.Timestamp
	11, // 25: nakama.peer.BinaryLog.track:type_name -> nakama.peer.Presence
	16, // 26: nakama.peer.BinaryLog.untrack:type_name -> nakama.peer.UntrackValue
	15, // 27: nakama.peer.BinaryLog.ban:type_name -> nakama.peer.BanValue
	11, // 28: nakama.peer.BinaryLog.updateTrack:type_name -> nakama.peer.Presence
	23, // 29: nakama.peer.Point.point:type_name -> nakama.peer.Point.PointEntry
	24, // 30: nakama.peer.CheckPoint.value:type_name -> nakama.peer.CheckPoint.ValueEntry
	18, // 31: nakama.peer.CheckPoint.ValueEntry.value:type_name -> nakama.peer.Point
	3,  // 32: nakama.peer.Peer.Call:input_type -> nakama.peer.Request
	3,  // 33: nakama.peer.Peer.Stream:input_type -> nakama.peer.Request
	4,  // 34: nakama.peer.Peer.Call:output_type -> nakama.peer.ResponseWriter
	4,  // 35: nakama.peer.Peer.Stream:output_type -> nakama.peer.ResponseWriter
	34, // [34:36] is the sub-list for method output_type
	32, // [32:34] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_peer_proto_init() }
func file_peer_proto_init() {
	if File_peer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_peer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWriter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipienter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UntrackValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_peer_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Request_Ping)(nil),
		(*Request_SingleSocket)(nil),
		(*Request_Disconnect)(nil),
		(*Request_Out)(nil),
		(*Request_In)(nil),
	}
	file_peer_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ResponseWriter_Envelope)(nil),
		(*ResponseWriter_Pong)(nil),
	}
	file_peer_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Recipienter_Token)(nil),
		(*Recipienter_Stream)(nil),
	}
	file_peer_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Frame_Request)(nil),
		(*Frame_ResponseWriter)(nil),
		(*Frame_BinaryLog)(nil),
		(*Frame_Status)(nil),
	}
	file_peer_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*BinaryLog_Track)(nil),
		(*BinaryLog_Untrack)(nil),
		(*BinaryLog_Ban)(nil),
		(*BinaryLog_UpdateTrack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peer_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peer_proto_goTypes,
		DependencyIndexes: file_peer_proto_depIdxs,
		EnumInfos:         file_peer_proto_enumTypes,
		MessageInfos:      file_peer_proto_msgTypes,
	}.Build()
	File_peer_proto = out.File
	file_peer_proto_rawDesc = nil
	file_peer_proto_goTypes = nil
	file_peer_proto_depIdxs = nil
}
